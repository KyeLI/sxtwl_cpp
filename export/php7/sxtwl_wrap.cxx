/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPHP
#define SWIGPHP
#endif

#define SWIG_PREFIX ""
#define SWIG_PREFIX_LEN 0

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * phprun.swg
 *
 * PHP runtime library
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "zend_exceptions.h"
#include "php.h"

#if PHP_MAJOR_VERSION != 7
# error These bindings need PHP7 - to generate PHP5 bindings use: SWIG < 4.0.0 and swig -php5
#endif

#include "ext/standard/php_string.h"
#include <stdlib.h> /* for abort(), used in generated code. */

/* This indirection is to work around const correctness issues in older PHP.
 * FIXME: Remove for PHP7?  Or might user code be using it? */
#define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_NAMED_FE(ZN, N, A)

#define SWIG_BOOL_CONSTANT(N, V) REGISTER_BOOL_CONSTANT(#N, V, CONST_CS | CONST_PERSISTENT)
#define SWIG_LONG_CONSTANT(N, V) REGISTER_LONG_CONSTANT(#N, V, CONST_CS | CONST_PERSISTENT)
#define SWIG_DOUBLE_CONSTANT(N, V) REGISTER_DOUBLE_CONSTANT(#N, V, CONST_CS | CONST_PERSISTENT)
#define SWIG_STRING_CONSTANT(N, V) REGISTER_STRING_CONSTANT(#N, (char*)V, CONST_CS | CONST_PERSISTENT)
#define SWIG_CHAR_CONSTANT(N, V) do {\
    char swig_char = (V);\
    REGISTER_STRINGL_CONSTANT(#N, &swig_char, 1, CONST_CS | CONST_PERSISTENT);\
} while (0)

/* ZEND_CONSTANT_SET_FLAGS is new in PHP 7.3. */
#ifdef ZEND_CONSTANT_SET_FLAGS
# define SWIG_ZEND_CONSTANT_SET_FLAGS ZEND_CONSTANT_SET_FLAGS
#else
# define SWIG_ZEND_CONSTANT_SET_FLAGS(C, F, N) do { (C)->flags = (F); (C)->module_number = (N); } while (0)
#endif

#ifdef __cplusplus
}
#endif

#define SWIG_fail goto fail

static const char *default_error_msg = "Unknown error occurred";
static int default_error_code = E_ERROR;

#define SWIG_PHP_Arg_Error_Msg(argnum,extramsg) "Error in argument " #argnum " "#extramsg

#define SWIG_PHP_Error(code,msg) do { SWIG_ErrorCode() = code; SWIG_ErrorMsg() = msg; SWIG_fail; } while (0)

#define SWIG_contract_assert(expr,msg) \
  if (!(expr) ) { zend_printf("Contract Assert Failed %s\n",msg ); } else

/* Standard SWIG API */
#define SWIG_GetModule(clientdata) SWIG_Php_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Php_SetModule(pointer, *(int*)clientdata)

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct {
  void * ptr;
  int newobject;
} swig_object_wrapper;

#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))

static void
SWIG_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject) {
  /*
   * First test for Null pointers.  Return those as PHP native NULL
   */
  if (!ptr ) {
    ZVAL_NULL(z);
    return;
  }
  if (type->clientdata) {
    swig_object_wrapper *value;
    if (! (*(int *)(type->clientdata)))
      zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=(newobject & 1);
    if ((newobject & 2) == 0) {
      /* Just register the pointer as a resource. */
      ZVAL_RES(z, zend_register_resource(value, *(int *)(type->clientdata)));
    } else {
      /*
       * Wrap the resource in an object, the resource will be accessible
       * via the "_cPtr" member. This is currently only used by
       * directorin typemaps.
       */
      zval resource;
      zend_class_entry *ce = NULL;
      const char *type_name = type->name+3; /* +3 so: _p_Foo -> Foo */
      size_t type_name_len;
      const char * p;
      HashTable * ht;

      /* Namespace__Foo -> Foo */
      /* FIXME: ugly and goes wrong for classes with __ in their names. */
      while ((p = strstr(type_name, "__")) != NULL) {
        type_name = p + 2;
      }
      type_name_len = strlen(type_name);

      ZVAL_RES(&resource, zend_register_resource(value, *(int *)(type->clientdata)));
      if (SWIG_PREFIX_LEN > 0) {
        zend_string * classname = zend_string_alloc(SWIG_PREFIX_LEN + type_name_len, 0);
        memcpy(classname->val, SWIG_PREFIX, SWIG_PREFIX_LEN);
        memcpy(classname->val + SWIG_PREFIX_LEN, type_name, type_name_len);
        ce = zend_lookup_class(classname);
        zend_string_release(classname);
      } else {
        zend_string * classname = zend_string_init(type_name, type_name_len, 0);
        ce = zend_lookup_class(classname);
        zend_string_release(classname);
      }
      if (ce == NULL) {
        /* class does not exist */
        ce = zend_standard_class_def;
      }

      ALLOC_HASHTABLE(ht);
      zend_hash_init(ht, 1, NULL, NULL, 0);
      zend_hash_str_update(ht, "_cPtr", sizeof("_cPtr") - 1, &resource);
      object_and_properties_init(z, ce, ht);
    }
    return;
  }
  zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
}

/* This pointer conversion routine takes the native pointer p (along with
   its type name) and converts it by calling appropriate casting functions
   according to ty.  The resultant pointer is returned, or NULL is returned
   if the pointer can't be cast.

   Sadly PHP has no API to find a type name from a type id, only from an
   instance of a resource of the type id, so we have to pass type_name as well.

   The two functions which might call this are:
   SWIG_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static void *
SWIG_ConvertResourceData(void * p, const char *type_name, swig_type_info *ty) {
  swig_cast_info *tc;
  void *result = 0;

  if (!ty) {
    /* They don't care about the target type, so just pass on the pointer! */
    return p;
  }

  if (! type_name) {  
    /* can't convert p to ptr type ty if we don't know what type p is */
    return NULL;
  }

  /* convert and cast p from type_name to ptr as ty. */
  tc = SWIG_TypeCheck(type_name, ty);
  if (tc) {
    int newmemory = 0;
    result = SWIG_TypeCast(tc, p, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  }
  return result;
}

/* This function returns a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource.
   If it fails, NULL is returned.
   It uses SWIG_ConvertResourceData to do the real work. */
static void *
SWIG_ConvertResourcePtr(zval *z, swig_type_info *ty, int flags) {
  swig_object_wrapper *value;
  void *p;
  const char *type_name;

  if (Z_RES_TYPE_P(z) == -1) return NULL;
  value = (swig_object_wrapper *) Z_RES_VAL_P(z);
  if (flags & SWIG_POINTER_DISOWN) {
    value->newobject = 0;
  }
  p = value->ptr;

  type_name=zend_rsrc_list_get_rsrc_type(Z_RES_P(z));

  return SWIG_ConvertResourceData(p, type_name, ty);
}

/* We allow passing of a RESOURCE pointing to the object or an OBJECT whose
   _cPtr is a resource pointing to the object */
static int
SWIG_ConvertPtr(zval *z, void **ptr, swig_type_info *ty, int flags) {
  if (z == NULL) {
    *ptr = 0;
    return 0;
  }

  switch (Z_TYPE_P(z)) {
    case IS_OBJECT: {
      HashTable * ht = Z_OBJ_HT_P(z)->get_properties(z);
      if (ht) {
        zval * _cPtr = zend_hash_str_find(ht, "_cPtr", sizeof("_cPtr") - 1);
        if (_cPtr) {
          if (Z_TYPE_P(_cPtr) == IS_INDIRECT) {
            _cPtr = Z_INDIRECT_P(_cPtr);
          }
          if (Z_TYPE_P(_cPtr) == IS_RESOURCE) {
            *ptr = SWIG_ConvertResourcePtr(_cPtr, ty, flags);
            return (*ptr == NULL ? -1 : 0);
          }
        }
      }
      break;
    }
    case IS_RESOURCE:
      *ptr = SWIG_ConvertResourcePtr(z, ty, flags);
      return (*ptr == NULL ? -1 : 0);
    case IS_NULL:
      *ptr = 0;
      return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  return -1;
}

static const char const_name[] = "swig_runtime_data_type_pointer";
static swig_module_info *SWIG_Php_GetModule() {
  zval *pointer = zend_get_constant_str(const_name, sizeof(const_name) - 1);
  if (pointer) {
    if (Z_TYPE_P(pointer) == IS_LONG) {
      return (swig_module_info *) pointer->value.lval;
    }
  } 
  return NULL;
}

static void SWIG_Php_SetModule(swig_module_info *pointer, int module_number) {
  REGISTER_LONG_CONSTANT(const_name, (long) pointer, CONST_CS | CONST_PERSISTENT);
}

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_int swig_types[0]
#define SWIGTYPE_p_Day swig_types[1]
#define SWIGTYPE_p_GZ swig_types[2]
#define SWIGTYPE_p_Time swig_types[3]
#define SWIGTYPE_p_difference_type swig_types[4]
#define SWIGTYPE_p_int swig_types[5]
#define SWIGTYPE_p_long_long swig_types[6]
#define SWIGTYPE_p_short swig_types[7]
#define SWIGTYPE_p_signed_char swig_types[8]
#define SWIGTYPE_p_size_type swig_types[9]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[10]
#define SWIGTYPE_p_unsigned_char swig_types[11]
#define SWIGTYPE_p_unsigned_int swig_types[12]
#define SWIGTYPE_p_unsigned_long_long swig_types[13]
#define SWIGTYPE_p_unsigned_short swig_types[14]
#define SWIGTYPE_p_value_type swig_types[15]
static swig_type_info *swig_types[17];
static swig_module_info swig_module = {swig_types, 16, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

/* header section */
ZEND_BEGIN_MODULE_GLOBALS(sxtwl)
const char *error_msg;
int error_code;
ZEND_END_MODULE_GLOBALS(sxtwl)
ZEND_DECLARE_MODULE_GLOBALS(sxtwl)
#define SWIG_ErrorMsg() ZEND_MODULE_GLOBALS_ACCESSOR(sxtwl, error_msg)
#define SWIG_ErrorCode() ZEND_MODULE_GLOBALS_ACCESSOR(sxtwl, error_code)
#ifdef __GNUC__
static void SWIG_FAIL(void) __attribute__ ((__noreturn__));
#endif

static void SWIG_FAIL(void) {
    zend_error(SWIG_ErrorCode(), "%s", SWIG_ErrorMsg());
    abort();
}

static void sxtwl_init_globals(zend_sxtwl_globals *globals ) {
  globals->error_msg = default_error_msg;
  globals->error_code = default_error_code;
}
static void SWIG_ResetError(void) {
  SWIG_ErrorMsg() = default_error_msg;
  SWIG_ErrorCode() = default_error_code;
}

ZEND_NAMED_FUNCTION(_wrap_swig_sxtwl_alter_newobject) {
  zval args[2];
  swig_object_wrapper *value;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) Z_RES_VAL(args[0]);
  value->newobject = zval_is_true(&args[1]);

  return;
}
ZEND_NAMED_FUNCTION(_wrap_swig_sxtwl_get_newobject) {
  zval args[1];
  swig_object_wrapper *value;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) Z_RES_VAL(args[0]);
  RETVAL_LONG(value->newobject);

  return;
}
#define SWIG_name  "sxtwl"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_sxtwl.h"
#ifdef __cplusplus
}
#endif


#include "const.h"
#include "sxtwl.h"


#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "zend_exceptions.h"
#define SWIG_exception(code, msg) do { zend_throw_exception(NULL, (char*)msg, code); goto thrown; } while (0)


#include <typeinfo>
#include <stdexcept>


#include <string>

SWIGINTERN bool std_vector_Sl_double_Sg__is_empty(std::vector< double > const *self){
        return self->empty();
      }
SWIGINTERN double std_vector_Sl_double_Sg__pop(std::vector< double > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        double x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__int = {"_int", "int", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Day = {"_p_Day", "Day *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GZ = {"_p_GZ", "GZ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Time = {"_p_Time", "Time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__int,
  &_swigt__p_Day,
  &_swigt__p_GZ,
  &_swigt__p_Time,
  &_swigt__p_difference_type,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__int[] = {  {&_swigt__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Day[] = {  {&_swigt__p_Day, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GZ[] = {  {&_swigt__p_GZ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Time[] = {  {&_swigt__p_Time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__int,
  _swigc__p_Day,
  _swigc__p_GZ,
  _swigc__p_Time,
  _swigc__p_difference_type,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* end header section */
/* vdecl subsection */
static int le_swig__p_GZ=0; /* handle for GZ */
static int le_swig__p_unsigned_char=0; /* handle for _p_unsigned_char */
static int le_swig__p_signed_char=0; /* handle for _p_signed_char */
static int le_swig__p_Day=0; /* handle for Day */
static int le_swig__p_std__vectorT_double_t=0; /* handle for JDList */
static int le_swig__p_unsigned_int=0; /* handle for _p_unsigned_int */
static int le_swig__p_size_type=0; /* handle for _p_size_type */
static int le_swig__p_unsigned_long_long=0; /* handle for _p_unsigned_long_long */
static int le_swig__p_long_long=0; /* handle for _p_long_long */
static int le_swig__p_unsigned_short=0; /* handle for _p_unsigned_short */
static int le_swig__p_short=0; /* handle for _p_short */
static int le_swig__p_Time=0; /* handle for Time */
static int le_swig__p_value_type=0; /* handle for _p_value_type */
static int le_swig__p_difference_type=0; /* handle for _p_difference_type */
static int le_swig__int=0; /* handle for _int */
static int le_swig__p_int=0; /* handle for _p_int */
/* end vdecl subsection */
/* wrapper section */
ZEND_NAMED_FUNCTION(_wrap_new_JDList__SWIG_0) {
  std::vector< double > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< double > *)new std::vector< double >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 1);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_JDList__SWIG_1) {
  std::vector< double >::size_type arg1 ;
  zval args[1];
  std::vector< double > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (std::vector< double >::size_type) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< double > *)new std::vector< double >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 1);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_JDList__SWIG_2) {
  std::vector< double > *arg1 = 0 ;
  zval args[1];
  std::vector< double > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg1 == NULL) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_JDList. Expected SWIGTYPE_p_std__vectorT_double_t");
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 1);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_JDList) {
  int argc;
  zval argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc, argv);
  if (argc == 0) {
    _wrap_new_JDList__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(&argv[0], (void**)&tmp, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL) >= 0);
    }
    if (_v) {
      _wrap_new_JDList__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE(argv[0]) == IS_LONG);
    if (_v) {
      _wrap_new_JDList__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_JDList'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_JDList_size) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval args[1];
  std::vector< double >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of JDList_size. Expected SWIGTYPE_p_std__vectorT_double_t");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< double > const *)arg1)->size();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_JDList_capacity) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval args[1];
  std::vector< double >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of JDList_capacity. Expected SWIGTYPE_p_std__vectorT_double_t");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< double > const *)arg1)->capacity();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_JDList_reserve) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  zval args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of JDList_reserve. Expected SWIGTYPE_p_std__vectorT_double_t");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (std::vector< double >::size_type) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_JDList_clear) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of JDList_clear. Expected SWIGTYPE_p_std__vectorT_double_t");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_JDList_push) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  zval args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of JDList_push. Expected SWIGTYPE_p_std__vectorT_double_t");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,48,CONVERT_FLOAT_IN@*/
  temp2 = (std::vector< double >::value_type) zval_get_double(&args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_JDList_is_empty) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of JDList_is_empty. Expected SWIGTYPE_p_std__vectorT_double_t");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_double_Sg__is_empty((std::vector< double > const *)arg1);
  
  RETVAL_BOOL((result) ? 1 : 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_JDList_pop) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval args[1];
  double result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of JDList_pop. Expected SWIGTYPE_p_std__vectorT_double_t");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (double)std_vector_Sl_double_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, "C++ std::out_of_range exception thrown", 0);
    return;
    
  }
  
  RETVAL_DOUBLE(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_JDList_get) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  zval args[2];
  std::vector< double >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of JDList_get. Expected SWIGTYPE_p_std__vectorT_double_t");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (int) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, "C++ std::out_of_range exception thrown", 0);
    return;
    
  }
  
  RETVAL_DOUBLE(*result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_JDList_set) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  zval args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of JDList_set. Expected SWIGTYPE_p_std__vectorT_double_t");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (int) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,48,CONVERT_FLOAT_IN@*/
  temp3 = (std::vector< double >::value_type) zval_get_double(&args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, "C++ std::out_of_range exception thrown", 0);
    return;
    
  }
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_JDList(zend_resource *res, const char *type_name) {
  swig_object_wrapper *value=(swig_object_wrapper *) res->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< double > *)SWIG_ConvertResourceData(ptr, type_name, SWIGTYPE_p_std__vectorT_double_t);
  if (! arg1) zend_error(E_ERROR, "std::vector<(double)> resource already free'd");
  delete arg1;
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Time__SWIG_0) {
  Time *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (Time *)new Time();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Time, 1);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Time__SWIG_1) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  zval args[6];
  Time *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (int) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (int) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg3 = (int) zval_get_long(&args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,48,CONVERT_FLOAT_IN@*/
  arg4 = (double) zval_get_double(&args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,48,CONVERT_FLOAT_IN@*/
  arg5 = (double) zval_get_double(&args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,48,CONVERT_FLOAT_IN@*/
  arg6 = (double) zval_get_double(&args[5]);
  /*@SWIG@*/;
  
  result = (Time *)new Time(arg1,arg2,arg3,arg4,arg5,arg6);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Time, 1);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Time) {
  int argc;
  zval argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc, argv);
  if (argc == 0) {
    _wrap_new_Time__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 6) {
    int _v;
    _v = (Z_TYPE(argv[0]) == IS_LONG);
    if (_v) {
      _v = (Z_TYPE(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE(argv[2]) == IS_LONG);
        if (_v) {
          _v = (Z_TYPE(argv[3]) == IS_DOUBLE);
          if (_v) {
            _v = (Z_TYPE(argv[4]) == IS_DOUBLE);
            if (_v) {
              _v = (Z_TYPE(argv[5]) == IS_DOUBLE);
              if (_v) {
                _wrap_new_Time__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Time'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_year_set) {
  Time *arg1 = (Time *) 0 ;
  int arg2 ;
  zval args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_year_set. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (int) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->year = arg2;
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_year_get) {
  Time *arg1 = (Time *) 0 ;
  zval args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_year_get. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int) ((arg1)->year);
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_month_set) {
  Time *arg1 = (Time *) 0 ;
  int arg2 ;
  zval args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_month_set. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (int) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->month = arg2;
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_month_get) {
  Time *arg1 = (Time *) 0 ;
  zval args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_month_get. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int) ((arg1)->month);
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_day_set) {
  Time *arg1 = (Time *) 0 ;
  int arg2 ;
  zval args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_day_set. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (int) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->day = arg2;
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_day_get) {
  Time *arg1 = (Time *) 0 ;
  zval args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_day_get. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int) ((arg1)->day);
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_hour_set) {
  Time *arg1 = (Time *) 0 ;
  double arg2 ;
  zval args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_hour_set. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,48,CONVERT_FLOAT_IN@*/
  arg2 = (double) zval_get_double(&args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->hour = arg2;
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_hour_get) {
  Time *arg1 = (Time *) 0 ;
  zval args[1];
  double result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_hour_get. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double) ((arg1)->hour);
  
  RETVAL_DOUBLE(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_min_set) {
  Time *arg1 = (Time *) 0 ;
  double arg2 ;
  zval args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_min_set. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,48,CONVERT_FLOAT_IN@*/
  arg2 = (double) zval_get_double(&args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->min = arg2;
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_min_get) {
  Time *arg1 = (Time *) 0 ;
  zval args[1];
  double result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_min_get. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double) ((arg1)->min);
  
  RETVAL_DOUBLE(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_sec_set) {
  Time *arg1 = (Time *) 0 ;
  double arg2 ;
  zval args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_sec_set. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,48,CONVERT_FLOAT_IN@*/
  arg2 = (double) zval_get_double(&args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->sec = arg2;
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Time_sec_get) {
  Time *arg1 = (Time *) 0 ;
  zval args[1];
  double result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Time_sec_get. Expected SWIGTYPE_p_Time");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double) ((arg1)->sec);
  
  RETVAL_DOUBLE(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Time(zend_resource *res, const char *type_name) {
  swig_object_wrapper *value=(swig_object_wrapper *) res->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  Time *arg1 = (Time *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (Time *)SWIG_ConvertResourceData(ptr, type_name, SWIGTYPE_p_Time);
  if (! arg1) zend_error(E_ERROR, "Time resource already free'd");
  delete arg1;
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_GZ__SWIG_0) {
  GZ *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (GZ *)new GZ();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_GZ, 1);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_GZ__SWIG_1) {
  uint8_t arg1 ;
  uint8_t arg2 ;
  zval args[2];
  GZ *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (uint8_t) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  result = (GZ *)new GZ(arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_GZ, 1);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_GZ) {
  int argc;
  zval argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc, argv);
  if (argc == 0) {
    _wrap_new_GZ__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE(argv[0]) == IS_LONG);
    if (_v) {
      _v = (Z_TYPE(argv[1]) == IS_LONG);
      if (_v) {
        _wrap_new_GZ__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_GZ'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_GZ_tg_set) {
  GZ *arg1 = (GZ *) 0 ;
  uint8_t arg2 ;
  zval args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_GZ, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GZ_tg_set. Expected SWIGTYPE_p_GZ");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->tg = arg2;
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_GZ_tg_get) {
  GZ *arg1 = (GZ *) 0 ;
  zval args[1];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_GZ, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GZ_tg_get. Expected SWIGTYPE_p_GZ");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t) ((arg1)->tg);
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_GZ_dz_set) {
  GZ *arg1 = (GZ *) 0 ;
  uint8_t arg2 ;
  zval args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_GZ, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GZ_dz_set. Expected SWIGTYPE_p_GZ");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->dz = arg2;
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_GZ_dz_get) {
  GZ *arg1 = (GZ *) 0 ;
  zval args[1];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_GZ, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GZ_dz_get. Expected SWIGTYPE_p_GZ");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t) ((arg1)->dz);
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_GZ(zend_resource *res, const char *type_name) {
  swig_object_wrapper *value=(swig_object_wrapper *) res->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  GZ *arg1 = (GZ *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (GZ *)SWIG_ConvertResourceData(ptr, type_name, SWIGTYPE_p_GZ);
  if (! arg1) zend_error(E_ERROR, "GZ resource already free'd");
  delete arg1;
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_fromSolar) {
  int arg1 ;
  uint8_t arg2 ;
  int arg3 ;
  zval args[3];
  Day *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (int) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg3 = (int) zval_get_long(&args[2]);
  /*@SWIG@*/;
  
  result = (Day *)Day::fromSolar(arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Day, 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_fromLunar__SWIG_0) {
  int arg1 ;
  uint8_t arg2 ;
  int arg3 ;
  bool arg4 ;
  zval args[4];
  Day *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (int) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg3 = (int) zval_get_long(&args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
  arg4 = (bool) zval_is_true(&args[3]);
  /*@SWIG@*/;
  
  result = (Day *)Day::fromLunar(arg1,arg2,arg3,arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Day, 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_fromLunar__SWIG_1) {
  int arg1 ;
  uint8_t arg2 ;
  int arg3 ;
  zval args[3];
  Day *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (int) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg3 = (int) zval_get_long(&args[2]);
  /*@SWIG@*/;
  
  result = (Day *)Day::fromLunar(arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Day, 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_fromLunar) {
  int argc;
  zval argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc, argv);
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE(argv[0]) == IS_LONG);
    if (_v) {
      _v = (Z_TYPE(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE(argv[2]) == IS_LONG);
        if (_v) {
          _wrap_Day_fromLunar__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    _v = (Z_TYPE(argv[0]) == IS_LONG);
    if (_v) {
      _v = (Z_TYPE(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE(argv[2]) == IS_LONG);
        if (_v) {
          _v = (Z_TYPE(argv[3]) == IS_TRUE || Z_TYPE(argv[3]) == IS_FALSE);
          if (_v) {
            _wrap_Day_fromLunar__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Day_fromLunar'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_after) {
  Day *arg1 = (Day *) 0 ;
  int arg2 ;
  zval args[2];
  Day *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_after. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (int) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  result = (Day *)(arg1)->after(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Day, 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_before) {
  Day *arg1 = (Day *) 0 ;
  int arg2 ;
  zval args[2];
  Day *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_before. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (int) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  result = (Day *)(arg1)->before(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Day, 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getLunarDay) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getLunarDay. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->getLunarDay();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getLunarMonth) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getLunarMonth. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t)(arg1)->getLunarMonth();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getLunarYear__SWIG_0) {
  Day *arg1 = (Day *) 0 ;
  bool arg2 ;
  zval args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getLunarYear. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
  arg2 = (bool) zval_is_true(&args[1]);
  /*@SWIG@*/;
  
  result = (int)(arg1)->getLunarYear(arg2);
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getLunarYear__SWIG_1) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getLunarYear. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->getLunarYear();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getLunarYear) {
  int argc;
  zval argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc, argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(&argv[0], (void**)&tmp, SWIGTYPE_p_Day, 0) >= 0);
    }
    if (_v) {
      _wrap_Day_getLunarYear__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(&argv[0], (void**)&tmp, SWIGTYPE_p_Day, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE(argv[1]) == IS_TRUE || Z_TYPE(argv[1]) == IS_FALSE);
      if (_v) {
        _wrap_Day_getLunarYear__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Day_getLunarYear'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getYearGZ__SWIG_0) {
  Day *arg1 = (Day *) 0 ;
  bool arg2 ;
  zval args[2];
  GZ result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getYearGZ. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
  arg2 = (bool) zval_is_true(&args[1]);
  /*@SWIG@*/;
  
  result = (arg1)->getYearGZ(arg2);
  {
    GZ * resultobj = new GZ((const GZ &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_GZ, 1);
  }
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getYearGZ__SWIG_1) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  GZ result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getYearGZ. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->getYearGZ();
  {
    GZ * resultobj = new GZ((const GZ &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_GZ, 1);
  }
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getYearGZ) {
  int argc;
  zval argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc, argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(&argv[0], (void**)&tmp, SWIGTYPE_p_Day, 0) >= 0);
    }
    if (_v) {
      _wrap_Day_getYearGZ__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(&argv[0], (void**)&tmp, SWIGTYPE_p_Day, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE(argv[1]) == IS_TRUE || Z_TYPE(argv[1]) == IS_FALSE);
      if (_v) {
        _wrap_Day_getYearGZ__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Day_getYearGZ'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getMonthGZ) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  GZ result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getMonthGZ. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->getMonthGZ();
  {
    GZ * resultobj = new GZ((const GZ &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_GZ, 1);
  }
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getDayGZ) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  GZ result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getDayGZ. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->getDayGZ();
  {
    GZ * resultobj = new GZ((const GZ &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_GZ, 1);
  }
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getHourGZ) {
  Day *arg1 = (Day *) 0 ;
  uint8_t arg2 ;
  zval args[2];
  GZ result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getHourGZ. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  result = (arg1)->getHourGZ(arg2);
  {
    GZ * resultobj = new GZ((const GZ &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_GZ, 1);
  }
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_isLunarLeap) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_isLunarLeap. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->isLunarLeap();
  
  RETVAL_BOOL((result) ? 1 : 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getSolarYear) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getSolarYear. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->getSolarYear();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getSolarMonth) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getSolarMonth. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t)(arg1)->getSolarMonth();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getSolarDay) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getSolarDay. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->getSolarDay();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getWeek) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getWeek. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t)(arg1)->getWeek();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getWeekIndex) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getWeekIndex. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t)(arg1)->getWeekIndex();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_hasJieQi) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_hasJieQi. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->hasJieQi();
  
  RETVAL_BOOL((result) ? 1 : 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getJieQi) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getJieQi. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t)(arg1)->getJieQi();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getJieQiJD) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  double result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getJieQiJD. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double)(arg1)->getJieQiJD();
  
  RETVAL_DOUBLE(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Day_getConstellation) {
  Day *arg1 = (Day *) 0 ;
  zval args[1];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Day, 0) < 0) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Day_getConstellation. Expected SWIGTYPE_p_Day");
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t)(arg1)->getConstellation();
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Day(zend_resource *res, const char *type_name) {
  swig_object_wrapper *value=(swig_object_wrapper *) res->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  Day *arg1 = (Day *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (Day *)SWIG_ConvertResourceData(ptr, type_name, SWIGTYPE_p_Day);
  if (! arg1) zend_error(E_ERROR, "Day resource already free'd");
  delete arg1;
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_fromSolar) {
  int arg1 ;
  uint8_t arg2 ;
  int arg3 ;
  zval args[3];
  Day *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (int) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg3 = (int) zval_get_long(&args[2]);
  /*@SWIG@*/;
  
  result = (Day *)sxtwl::fromSolar(arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Day, 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_fromLunar__SWIG_0) {
  int arg1 ;
  uint8_t arg2 ;
  int arg3 ;
  bool arg4 ;
  zval args[4];
  Day *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (int) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg3 = (int) zval_get_long(&args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
  arg4 = (bool) zval_is_true(&args[3]);
  /*@SWIG@*/;
  
  result = (Day *)sxtwl::fromLunar(arg1,arg2,arg3,arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Day, 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_fromLunar__SWIG_1) {
  int arg1 ;
  uint8_t arg2 ;
  int arg3 ;
  zval args[3];
  Day *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (int) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg3 = (int) zval_get_long(&args[2]);
  /*@SWIG@*/;
  
  result = (Day *)sxtwl::fromLunar(arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Day, 0);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_fromLunar) {
  int argc;
  zval argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc, argv);
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE(argv[0]) == IS_LONG);
    if (_v) {
      _v = (Z_TYPE(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE(argv[2]) == IS_LONG);
        if (_v) {
          _wrap_fromLunar__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    _v = (Z_TYPE(argv[0]) == IS_LONG);
    if (_v) {
      _v = (Z_TYPE(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE(argv[2]) == IS_LONG);
        if (_v) {
          _v = (Z_TYPE(argv[3]) == IS_TRUE || Z_TYPE(argv[3]) == IS_FALSE);
          if (_v) {
            _wrap_fromLunar__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'fromLunar'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_siZhu2Year) {
  GZ arg1 ;
  GZ arg2 ;
  GZ arg3 ;
  GZ arg4 ;
  int arg5 ;
  int arg6 ;
  GZ *tmp1 ;
  GZ *tmp2 ;
  GZ *tmp3 ;
  GZ *tmp4 ;
  zval args[6];
  std::vector< double > result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &tmp1, SWIGTYPE_p_GZ, 0) < 0 || tmp1 == NULL) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of siZhu2Year. Expected SWIGTYPE_p_GZ");
  }
  arg1 = *tmp1;
  
  
  if (SWIG_ConvertPtr(&args[1], (void **) &tmp2, SWIGTYPE_p_GZ, 0) < 0 || tmp2 == NULL) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of siZhu2Year. Expected SWIGTYPE_p_GZ");
  }
  arg2 = *tmp2;
  
  
  if (SWIG_ConvertPtr(&args[2], (void **) &tmp3, SWIGTYPE_p_GZ, 0) < 0 || tmp3 == NULL) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of siZhu2Year. Expected SWIGTYPE_p_GZ");
  }
  arg3 = *tmp3;
  
  
  if (SWIG_ConvertPtr(&args[3], (void **) &tmp4, SWIGTYPE_p_GZ, 0) < 0 || tmp4 == NULL) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of siZhu2Year. Expected SWIGTYPE_p_GZ");
  }
  arg4 = *tmp4;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg5 = (int) zval_get_long(&args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg6 = (int) zval_get_long(&args[5]);
  /*@SWIG@*/;
  
  result = sxtwl::siZhu2Year(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    std::vector< double > * resultobj = new std::vector< double >((const std::vector< double > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_double_t, 1);
  }
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_getShiGz) {
  uint8_t arg1 ;
  uint8_t arg2 ;
  zval args[2];
  GZ result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (uint8_t) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  result = sxtwl::getShiGz(arg1,arg2);
  {
    GZ * resultobj = new GZ((const GZ &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_GZ, 1);
  }
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_getRunMonth) {
  int arg1 ;
  zval args[1];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (int) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  result = (uint8_t)sxtwl::getRunMonth(arg1);
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_getLunarMonthNum__SWIG_0) {
  int arg1 ;
  uint8_t arg2 ;
  bool arg3 ;
  zval args[3];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (int) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
  arg3 = (bool) zval_is_true(&args[2]);
  /*@SWIG@*/;
  
  result = (uint8_t)sxtwl::getLunarMonthNum(arg1,arg2,arg3);
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_getLunarMonthNum__SWIG_1) {
  int arg1 ;
  uint8_t arg2 ;
  zval args[2];
  uint8_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg1 = (int) zval_get_long(&args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,6,CONVERT_INT_IN@*/
  arg2 = (uint8_t) zval_get_long(&args[1]);
  /*@SWIG@*/;
  
  result = (uint8_t)sxtwl::getLunarMonthNum(arg1,arg2);
  
  RETVAL_LONG(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_getLunarMonthNum) {
  int argc;
  zval argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc, argv);
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE(argv[0]) == IS_LONG);
    if (_v) {
      _v = (Z_TYPE(argv[1]) == IS_LONG);
      if (_v) {
        _wrap_getLunarMonthNum__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE(argv[0]) == IS_LONG);
    if (_v) {
      _v = (Z_TYPE(argv[1]) == IS_LONG);
      if (_v) {
        _v = (Z_TYPE(argv[2]) == IS_TRUE || Z_TYPE(argv[2]) == IS_FALSE);
        if (_v) {
          _wrap_getLunarMonthNum__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'getLunarMonthNum'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_JD2DD) {
  double arg1 ;
  zval args[1];
  Time result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:D:\swigwin-4.0.2\Lib\php\utils.i,48,CONVERT_FLOAT_IN@*/
  arg1 = (double) zval_get_double(&args[0]);
  /*@SWIG@*/;
  
  result = sxtwl::JD2DD(arg1);
  {
    Time * resultobj = new Time((const Time &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_Time, 1);
  }
thrown:
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_toJD) {
  Time *arg1 = 0 ;
  zval args[1];
  double result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  if (SWIG_ConvertPtr(&args[0], (void **) &arg1, SWIGTYPE_p_Time, 0) < 0 || arg1 == NULL) {
    SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of toJD. Expected SWIGTYPE_p_Time");
  }
  
  result = (double)sxtwl::toJD(*arg1);
  
  RETVAL_DOUBLE(result);
  
thrown:
  return;
fail:
  SWIG_FAIL();
}


static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_GZ) {
  __wrap_delete_GZ(res, SWIGTYPE_p_GZ->name);
}
static ZEND_RSRC_DTOR_FUNC(_swig_default_rsrc_destroy) {
  efree(res->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Day) {
  __wrap_delete_Day(res, SWIGTYPE_p_Day->name);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_double_t) {
  __wrap_delete_JDList(res, SWIGTYPE_p_std__vectorT_double_t->name);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Time) {
  __wrap_delete_Time(res, SWIGTYPE_p_Time->name);
}
/* end wrapper section */
/* class entry subsection */


/* arginfo subsection */
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_0, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_00, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_000, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_000000, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()


/* entry subsection */
/* Every non-class user visible function must have an entry here */
static zend_function_entry sxtwl_functions[] = {
 SWIG_ZEND_NAMED_FE(new_jdlist,_wrap_new_JDList,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(jdlist_size,_wrap_JDList_size,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(jdlist_capacity,_wrap_JDList_capacity,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(jdlist_reserve,_wrap_JDList_reserve,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(jdlist_clear,_wrap_JDList_clear,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(jdlist_push,_wrap_JDList_push,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(jdlist_is_empty,_wrap_JDList_is_empty,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(jdlist_pop,_wrap_JDList_pop,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(jdlist_get,_wrap_JDList_get,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(jdlist_set,_wrap_JDList_set,swig_arginfo_000)
 SWIG_ZEND_NAMED_FE(new_time,_wrap_new_Time,swig_arginfo_000000)
 SWIG_ZEND_NAMED_FE(time_year_set,_wrap_Time_year_set,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(time_year_get,_wrap_Time_year_get,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(time_month_set,_wrap_Time_month_set,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(time_month_get,_wrap_Time_month_get,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(time_day_set,_wrap_Time_day_set,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(time_day_get,_wrap_Time_day_get,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(time_hour_set,_wrap_Time_hour_set,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(time_hour_get,_wrap_Time_hour_get,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(time_min_set,_wrap_Time_min_set,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(time_min_get,_wrap_Time_min_get,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(time_sec_set,_wrap_Time_sec_set,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(time_sec_get,_wrap_Time_sec_get,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(new_gz,_wrap_new_GZ,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(gz_tg_set,_wrap_GZ_tg_set,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(gz_tg_get,_wrap_GZ_tg_get,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(gz_dz_set,_wrap_GZ_dz_set,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(gz_dz_get,_wrap_GZ_dz_get,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_fromsolar,_wrap_Day_fromSolar,swig_arginfo_000)
 SWIG_ZEND_NAMED_FE(day_fromlunar,_wrap_Day_fromLunar,swig_arginfo_000)
 SWIG_ZEND_NAMED_FE(day_after,_wrap_Day_after,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(day_before,_wrap_Day_before,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(day_getlunarday,_wrap_Day_getLunarDay,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getlunarmonth,_wrap_Day_getLunarMonth,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getlunaryear,_wrap_Day_getLunarYear,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getyeargz,_wrap_Day_getYearGZ,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getmonthgz,_wrap_Day_getMonthGZ,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getdaygz,_wrap_Day_getDayGZ,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_gethourgz,_wrap_Day_getHourGZ,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(day_islunarleap,_wrap_Day_isLunarLeap,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getsolaryear,_wrap_Day_getSolarYear,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getsolarmonth,_wrap_Day_getSolarMonth,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getsolarday,_wrap_Day_getSolarDay,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getweek,_wrap_Day_getWeek,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getweekindex,_wrap_Day_getWeekIndex,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_hasjieqi,_wrap_Day_hasJieQi,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getjieqi,_wrap_Day_getJieQi,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getjieqijd,_wrap_Day_getJieQiJD,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(day_getconstellation,_wrap_Day_getConstellation,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(fromsolar,_wrap_fromSolar,swig_arginfo_000)
 SWIG_ZEND_NAMED_FE(fromlunar,_wrap_fromLunar,swig_arginfo_000)
 SWIG_ZEND_NAMED_FE(sizhu2year,_wrap_siZhu2Year,swig_arginfo_000000)
 SWIG_ZEND_NAMED_FE(getshigz,_wrap_getShiGz,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(getrunmonth,_wrap_getRunMonth,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(getlunarmonthnum,_wrap_getLunarMonthNum,swig_arginfo_00)
 SWIG_ZEND_NAMED_FE(jd2dd,_wrap_JD2DD,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(tojd,_wrap_toJD,swig_arginfo_0)
 SWIG_ZEND_NAMED_FE(swig_sxtwl_alter_newobject,_wrap_swig_sxtwl_alter_newobject,NULL)
 SWIG_ZEND_NAMED_FE(swig_sxtwl_get_newobject,_wrap_swig_sxtwl_get_newobject,NULL)
 ZEND_FE_END
};

/* init section */
zend_module_entry sxtwl_module_entry = {
    STANDARD_MODULE_HEADER,
    "sxtwl",
    sxtwl_functions,
    PHP_MINIT(sxtwl),
    NULL, /* No MSHUTDOWN code */
    NULL, /* No RINIT code */
    NULL, /* No RSHUTDOWN code */
    NULL, /* No MINFO code */
    NO_VERSION_YET,
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &sxtwl_module_entry;

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT zend_module_entry *get_module(void) { return &sxtwl_module_entry; }
#ifdef __cplusplus
}
#endif

#define SWIG_php_minit PHP_MINIT_FUNCTION(sxtwl)

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


SWIG_php_minit {
  SWIG_InitializeModule((void*)&module_number);

  /* oinit subsection */
  ZEND_INIT_MODULE_GLOBALS(sxtwl, sxtwl_init_globals, NULL);

  /* Register resource destructors for pointer types */
  le_swig__p_GZ=zend_register_list_destructors_ex(_wrap_destroy_p_GZ, NULL, SWIGTYPE_p_GZ->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_GZ,&le_swig__p_GZ);
  le_swig__p_unsigned_char=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_unsigned_char->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_unsigned_char,&le_swig__p_unsigned_char);
  le_swig__p_signed_char=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_signed_char->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_signed_char,&le_swig__p_signed_char);
  le_swig__p_Day=zend_register_list_destructors_ex(_wrap_destroy_p_Day, NULL, SWIGTYPE_p_Day->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_Day,&le_swig__p_Day);
  le_swig__p_std__vectorT_double_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_double_t, NULL, SWIGTYPE_p_std__vectorT_double_t->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_t,&le_swig__p_std__vectorT_double_t);
  le_swig__p_unsigned_int=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_unsigned_int->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_unsigned_int,&le_swig__p_unsigned_int);
  le_swig__p_size_type=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_size_type->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_size_type,&le_swig__p_size_type);
  le_swig__p_unsigned_long_long=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_unsigned_long_long->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_unsigned_long_long,&le_swig__p_unsigned_long_long);
  le_swig__p_long_long=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_long_long->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_long_long,&le_swig__p_long_long);
  le_swig__p_unsigned_short=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_unsigned_short->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_unsigned_short,&le_swig__p_unsigned_short);
  le_swig__p_short=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_short->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_short,&le_swig__p_short);
  le_swig__p_Time=zend_register_list_destructors_ex(_wrap_destroy_p_Time, NULL, SWIGTYPE_p_Time->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_Time,&le_swig__p_Time);
  le_swig__p_value_type=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_value_type->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_value_type,&le_swig__p_value_type);
  le_swig__p_difference_type=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_difference_type->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_difference_type,&le_swig__p_difference_type);
  le_swig__int=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_int->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_int,&le_swig__int);
  le_swig__p_int=zend_register_list_destructors_ex(_swig_default_rsrc_destroy, NULL, SWIGTYPE_p_int->name, module_number);
  SWIG_TypeClientData(SWIGTYPE_p_int,&le_swig__p_int);
  CG(active_class_entry) = NULL;
  /* end oinit subsection */

  /* cinit subsection */
SWIG_LONG_CONSTANT(J2000, (int)2451545);
  /* end cinit subsection */

  return SUCCESS;
}

/* end init section */
